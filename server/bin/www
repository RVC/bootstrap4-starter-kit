#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const chalk = require('chalk'); // https://github.com/chalk/chalk
const semver = require('semver'); // https://npmjs.org/package/semver

// Node Modules
const http = require('http');

// Configuration and debugging
const pkg = require('../../package.json');
const debug = require('debug')(`${pkg.name}:www`); // always use app name and name of .js file

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Create HTTPs server.
 */

// Not currently used since we terminate SSL at
// the load balancer level. However this coupled
// with HSTS will get an A+ SSL Labs score!

// var httpsServer = https.createServer({
//   key: privateKey,
//   cert: certificate,
//   ca: certificateAuthority,
//   ciphers: [
//     'ECDHE-RSA-AES128-GCM-SHA256',
//     'ECDHE-ECDSA-AES128-GCM-SHA256',
//     'ECDHE-RSA-AES256-GCM-SHA384',
//     'ECDHE-ECDSA-AES256-GCM-SHA384',
//     'DHE-RSA-AES128-GCM-SHA256',
//     'ECDHE-RSA-AES128-SHA256',
//     'DHE-RSA-AES128-SHA256',
//     'ECDHE-RSA-AES256-SHA384',
//     'DHE-RSA-AES256-SHA384',
//     'ECDHE-RSA-AES256-SHA256',
//     'DHE-RSA-AES256-SHA256',
//     'HIGH',
//     '!aNULL',
//     '!eNULL',
//     '!EXPORT',
//     '!DES',
//     '!RC4',
//     '!MD5',
//     '!PSK',
//     '!SRP',
//     '!CAMELLIA'
//   ].join(':'),
// }, app);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  // var bind = (typeof port === 'string') ? 'Pipe ' + port : 'Port ' + port;
  let bind = '';
  if (typeof port === 'string') {
    bind = `Pipe, ${port}`;
  } else {
    bind = `Port, ${port}`;
  }

  if (error.syscall !== 'listen') {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      debug(chalk.red.bold(`${bind} requires elevated privileges.`));
      process.exit(1);
      break;
    case 'EADDRINUSE':
      debug(chalk.red.bold(`${bind} is already in use.`));
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const engine = pkg.engines.node;
  let bind = '';

  if (typeof addr === 'string') {
    bind = `pipe ${addr}`;
  } else {
    bind = `port: ${addr.port}`;
  }

  // Test for correct node version as spec'ed in package.info
  if (!semver.satisfies(process.versions.node, engine)) {
    debug(`${chalk.red.bold('Error: unsupported version of Node!')}`);
    debug(`${chalk.red.bold(pkg.name)} needs Node version ${chalk.red.bold(engine)}`);
    process.exit(0);
  }

  // Exit cleanly on Ctrl+C
  process.on('SIGINT', () => {
    debug(`\n has ${chalk.green.bold('shutdown')}`);
    debug(`was running for ${chalk.green.bold(Math.round(process.uptime()).toString())} seconds.`);
    process.exit(0);
  });

  // Log how we are running
  debug(`Listening on: ${chalk.green.bold(bind)}`);
  debug(`Listening in ${chalk.green.bold(app.settings.env)} mode.`);
  debug(`${chalk.green.bold('Ctrl+C')} to shut down.`);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
